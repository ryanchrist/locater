[{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ryanchrist.github.io/locater/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ryanchrist.github.io/locater/articles/simple_gwas_example.html","id":"boosting-smt-results-with-local-ancestry-inference-running-kalis-and-locater-together-with-easy-wrapper-function-testloci","dir":"Articles","previous_headings":"","what":"Boosting SMT results with local ancestry inference: running kalis and LOCATER together with easy wrapper function TestLoci","title":"Simple LOCATER Example","text":"start loading haplotypes corresponding genomic segment interest. simulate simple quantitative trait driven four causal variants. Now determine target variants based initial SMT results. iterate LOCATER target loci. plot results compare SMT local Manhattan plot.","code":"# Load simulated haplotypes and recombination map CacheHaplotypes(SmallHaps) map <- SmallMap # Simulate 20 Phenotypes where only the first is driven by local causal variants  n <- N()/2 # number of samples m <- 20 # number of phenotypes  y <- matrix(rnorm(n*m),n,m) g <- QueryCache(c(204,205,207,210)) # c(204,205,207) are indices of causal loci g <- g[,seq(1,N(),2)] + g[,seq(2,N(),2)]  y[,1] <- y[,1] + colSums((g)*c(150,10,30,100)#c(150,8,20)                          /rowSums(g)) A <- matrix(1,n,1) # background covariate matrix is just an index here # Determine target loci based on SMT smt.res <- TestCachedMarkers(y, A = A) target.loci <- FindTargetVars(map, min.cM = 0.1, initial.targets = smt.res, smt.thresh = 3) # Specify kalis parameters  pars <- Parameters(CalcRho(diff(map),s = 0.0001),mu = 1e-16) # specify HMM parameters  # Specify a list of optional arguments to control exactly how locater tests each position. If more than one combination of testing parameters is desired, a data.frame with multiple rows can be given and locater will efficiently evaluate all testing options. test.opts <- data.frame(\"max.k\" = 128)  #set.seed(53) res <- TestLoci(y, pars, target.loci = target.loci, test.opts = test.opts) smt.p1 <- smt.res[,1] res.p1 <- res[phenotype==1,c(\"locus.idx\",\"tot\")]  COLORS <- palette.colors(3) plot(0,0, type = \"n\",       ylim=range(pretty(c(0,max(c(smt.p1,res.p1$tot),na.rm=T)))),      xlim = range(pretty(map)),      las=1,bty=\"n\",      ylab = \"-log10 p-value\", xlab = \"cM position\") points(map,smt.p1,col=COLORS[1],pch=20) points(map[res.p1$locus.idx],res.p1$tot,col=COLORS[2],pch=20) legend(\"topleft\",legend = c(\"SMT\",\"LOCATER\"),        fill = COLORS, bty = \"n\")"},{"path":"https://ryanchrist.github.io/locater/articles/simple_gwas_example.html","id":"using-other-ancestry-inference-engines","dir":"Articles","previous_headings":"","what":"Using other ancestry inference engines","title":"Simple LOCATER Example","text":"locater package API exposes sub-routines needed running LOCATER combination ancestry inference engine. TestLoci function locater package includes following function calls.","code":""},{"path":"https://ryanchrist.github.io/locater/articles/simple_gwas_example.html","id":"testing-inferred-discrete-clade-genotypes","dir":"Articles","previous_headings":"Using other ancestry inference engines","what":"Testing inferred discrete clade genotypes","title":"Simple LOCATER Example","text":"Building example , can test inferred discrete clade genotypes Stable Distillation call distill_pivot_par function. Let y n \\times m matrix phenotypes, x n \\times p matrix predictors (inferred clade genotypes), Q matrix QR decomposition n \\times q background covariate matrix = QR. default, request Renyi Outlier Test search 16 distinct active predictors among colums x. start simulating set inferred clade genotypes order run procedure, assume come ancestry inference engine. Among theose simulated genotypes, include 4 genotypes (matrix g) actually affect first phenotype. plot −log10-log_{10} p-value obtained running parallelized Stable Distillation 20 simulated phenotypes bar plot.  first phenotype, one driven simulated causal variants, significant SD p-value. sd_res contain list lots information alongside m p-values plotted . information function available ’s manual page, accessible typing ?locater::distill_pivot_par R.","code":"p <- 50 # number of inferred genotypes num_true_causal <- nrow(g)  x <- cbind(t(g),Matrix::sparseMatrix(i = sample.int(n,10*(p-num_true_causal),replace = TRUE),                            j = rep(seq_len(p-num_true_causal), each=10),                           x = rep(c(rep(1,8),2,2), (p-num_true_causal)),                            dims = c(n,p-num_true_causal)))  Q <- qr.Q(qr(A))  sd_res <- distill_pivot_par(y, x, Q, max_num_causal = 16) barplot(-log10(sd_res$p_value),names.arg=1:m,xlab=\"Phenotype\",ylab=\"-log10 SD p-value\",las=1,cex.names=0.8)"},{"path":"https://ryanchrist.github.io/locater/articles/simple_gwas_example.html","id":"testing-inferred-local-relatedness-matrices","dir":"Articles","previous_headings":"Using other ancestry inference engines","what":"Testing inferred local relatedness matrices","title":"Simple LOCATER Example","text":"Building example testing inferred discrete clade genotypes , can test inferred local relatedness matrices TestCladeMat function locater package. assume inferred local relatedness matrix M returned ancestry inference engine. , just construct simple M genotypes simulated Stable Distillation example . Note, M must passed TestCladeMat base R matrix. , account background covaraites via Q. argument k specifies maximum number eigenvalues (-QQ')M(-QQ') budget hopes gaining precise p-value estimates. TestCladeMat allows much finer control process; please see documentation typing ?locater::TestCladeMat R details. start setting k=0 means TestCladeMat just return Satterthwaite p-values. TestCladeMat returns data.frame m rows row corresponds results phenotype y[,]. , can plot −log10-log_{10} p-values returned quadratic form testing procedure. , see association first (non-null) phenotype. However, p-value estimates precise/reliable due use Satterthwaite approximation null distribution. TestCladeMat warns fact returned results setting precise=FALSE . may used crude approximation first pass screen genome. order obtain reliable estimates using novel tail approximation approaches proposed paper, can test locus , allowing k eigenvalues evaluated. Plotting results, see significant much modest −log10-log_{10} p-value estimate associated first phenotype.  Printing, results, see TestCladeMat says results/p-values reliable (precise = TRUE). see precise association signal phenotype 1 found quadratic form testing now strong one observed using Stable Distillation. Note, number null genotypes simulated small: set p=ncol(x)=50. consider relatedness matrix many clades, see signal found quadratic form testing drop much quickly signal found via Stable Distillation (much robust inclusion null predictors/genotypes).","code":"M <- as.matrix(tcrossprod(x)) q_res <- TestCladeMat(y, M, Q, k = 0) barplot(q_res$qform,names.arg=1:m,xlab=\"Phenotype\",ylab=\"-log10 Quadratic Form p-value\",las=1,cex.names=0.8) print(q_res[1:5,]) #>        qform        obs obs.T precise exit.status #> 1 74.8638206 12024.8522    NA   FALSE           0 #> 2  0.7115142  1021.7774    NA   FALSE           0 #> 3  0.1840489   746.9028    NA   FALSE           0 #> 4  0.1064964   674.4044    NA   FALSE           0 #> 5  0.1059957   673.8431    NA   FALSE           0 q_res_precise <- TestCladeMat(y, M, Q, k = 10) barplot(q_res_precise$qform,names.arg=1:m,xlab=\"Phenotype\",ylab=\"-log10 Quadratic Form p-value\",las=1,cex.names=0.8) print(q_res_precise[1:5,]) #>        qform        obs obs.T precise exit.status #> 1 30.8803872 12024.8522    NA    TRUE           0 #> 2  0.7335176  1021.7774    NA    TRUE           0 #> 3  0.1895087   746.9028    NA    TRUE           0 #> 4  0.1047127   674.4044    NA    TRUE           0 #> 5  0.1041659   673.8431    NA    TRUE           0"},{"path":"https://ryanchrist.github.io/locater/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ryan Christ. Maintainer.","code":""},{"path":"https://ryanchrist.github.io/locater/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Christ R (2025). locater: Locus Orthogonalized Clade & Ancestry TEsting R. R package version 1.0.0, https://ryanchrist.github.io/locater/.","code":"@Manual{,   title = {locater: Locus Orthogonalized Clade & Ancestry TEsting in R},   author = {Ryan Christ},   year = {2025},   note = {R package version 1.0.0},   url = {https://ryanchrist.github.io/locater/}, }"},{"path":"https://ryanchrist.github.io/locater/index.html","id":"introduction","dir":"","previous_headings":"","what":"Locus Orthogonalized Clade & Ancestry TEsting in R","title":"Locus Orthogonalized Clade & Ancestry TEsting in R","text":"locater R package testing tree structures (represented via set discrete clades /relatedness matrix) association traits interest. Please see pre-print describing underlying LOCATER methodology : https://www.biorxiv.org/content/10.1101/2024.09.30.615852 . recently applied locater richly phenotyped whole genome sequencing described pre-print https://www.medrxiv.org/content/10.1101/2024.11.04.24316696. Please see package website, https://ryanchrist.github.io/locater/ , documentation Article presenting toy example getting started: https://ryanchrist.github.io/locater/articles/simple_gwas_example.html . article also demonstrates locater package API may used test inferred clades relatedness matrices generated ancestry inference methods. scripts used generate simulation results presented pre-print can found : https://github.com/ryanchrist/locater_paper_scripts . locater natively interacts local ancestry inference software package kalis, available https://github.com/louisaslett/kalis/, package exports functions exposing internal testing routines LOCATER may used conjunction local genealogy inference engines/software. exported function TestLoci wrapper function used testing target variants along chromosome; provides template users hoping adapt locater use different ancestry inference engine otherwise customize testing routine.","code":""},{"path":"https://ryanchrist.github.io/locater/index.html","id":"try-out-locater-via-docker","dir":"","previous_headings":"","what":"Try out locater via Docker","title":"Locus Orthogonalized Clade & Ancestry TEsting in R","text":"try locater immediately, check docker image available https://hub.docker.com/repositories/rchrist7 . system Docker installed, R can launched interactive session image running:{bash docker, eval=FALSE} docker run -rchrist7/mini-shark /bin/bash R Call require(locater) R session load locater. get started, simple vignette available Articles tab https://ryanchrist.github.io/locater/ alongside documentation.","code":""},{"path":"https://ryanchrist.github.io/locater/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation Instructions","title":"Locus Orthogonalized Clade & Ancestry TEsting in R","text":"aiming install locater system image, please follow steps .","code":""},{"path":"https://ryanchrist.github.io/locater/index.html","id":"install-r","dir":"","previous_headings":"","what":"Install R","title":"Locus Orthogonalized Clade & Ancestry TEsting in R","text":"already installed, please visit https://posit.co/download/rstudio-desktop/ guidance. R installed, suggest installing order copying pasting following R commands R.","code":""},{"path":"https://ryanchrist.github.io/locater/index.html","id":"install-kalis","dir":"","previous_headings":"","what":"Install kalis","title":"Locus Orthogonalized Clade & Ancestry TEsting in R","text":"default ancestry inference engine kalis may installed public Github repository follows.","code":"if(!require(\"BiocManager\", quietly = TRUE)){install.packages(\"BiocManager\")} # install rdhf5, this requires zlib (if not already installed, try sudo apt install zlib1g-dev on Linux; brew install zlib on MacOS) BiocManager::install(\"rhdf5\") # a suggested dependency for kalis that will be required for running locater  install.packages(\"remotes\") remotes::install_github(\"louisaslett/kalis\",   configure.vars = c(kalis = \"PKG_CFLAGS='-march=native -mtune=native -O3'\")) if(!require(kalis)){stop(\"kalis was not properly installed\")}"},{"path":"https://ryanchrist.github.io/locater/index.html","id":"install-dependencies-from-public-r-universe-respository","dir":"","previous_headings":"","what":"Install Dependencies from public r-universe respository","title":"Locus Orthogonalized Clade & Ancestry TEsting in R","text":"","code":"install.packages(\"RcppRoll\") install.packages(\"QForm\", repos = \"https://ryanchrist.r-universe.dev\", dependencies=TRUE) if(!require(QForm)){stop(\"Qform was not properly installed\")}  install.packages(\"renyi\", repos = \"https://ryanchrist.r-universe.dev\") if(!require(renyi)){stop(\"renyi was not properly installed\")}"},{"path":"https://ryanchrist.github.io/locater/index.html","id":"install-locater-from-github","dir":"","previous_headings":"","what":"Install LOCATER from GitHub","title":"Locus Orthogonalized Clade & Ancestry TEsting in R","text":"","code":"remotes::install_github(\"ryanchrist/locater\") if(!require(locater)){stop(\"locater was not properly installed\")}"},{"path":"https://ryanchrist.github.io/locater/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Locus Orthogonalized Clade & Ancestry TEsting in R","text":"Please see introductory package vignette https://ryanchrist.github.io/locater/articles/simple_gwas_example.html . vignette provides simple example deploying locater demonstration locater package API can used test inferred clades relatedness matrices generated ancestry inference methods. source code available vignettes/simple_locater_example.Rmd . vignette can also built viewed R calling following.","code":"remotes::install_github(\"ryanchrist/locater\", build_vignettes=TRUE) vignette(\"simple_locater_example\",package=\"locater\")"},{"path":"https://ryanchrist.github.io/locater/reference/FindTargetVars.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for Finding Target Variants for Screening — FindTargetVars","title":"Helper for Finding Target Variants for Screening — FindTargetVars","text":"Use recombination distance (preliminary single marker test results) select target variants screening","code":""},{"path":"https://ryanchrist.github.io/locater/reference/FindTargetVars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for Finding Target Variants for Screening — FindTargetVars","text":"","code":"FindTargetVars(   map,   min.cM = 0.1,   from = 1L,   to = length(map),   initial.targets = NULL,   smt.thresh = NULL )"},{"path":"https://ryanchrist.github.io/locater/reference/FindTargetVars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for Finding Target Variants for Screening — FindTargetVars","text":"map vector specifying recombination map 'CDF' cached variants cM min.cM desired minimum recombination distance target loci cM first variant index consider target last variant index consider target initial.targets integer vector data.frame. integer vector, indices variants included returned targets. data.frame, single marker test results format returned TestCachedMarkers used combination smt.thresh implicitly define initial target variants smt.thresh initial.targets provided data.frame single marker test results, -log10 p-value threshold variants signal threshold included initial targets","code":""},{"path":"https://ryanchrist.github.io/locater/reference/FindTargetVars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for Finding Target Variants for Screening — FindTargetVars","text":"integer vector target variant indices","code":""},{"path":[]},{"path":"https://ryanchrist.github.io/locater/reference/FindTargetVars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper for Finding Target Variants for Screening — FindTargetVars","text":"","code":"if (FALSE) { # \\dontrun{ } # }"},{"path":"https://ryanchrist.github.io/locater/reference/FitNull.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Null Ordinary Least Squares Model — FitNull","title":"Fit Null Ordinary Least Squares Model — FitNull","text":"Fit Null Ordinary Least Squares Model","code":""},{"path":"https://ryanchrist.github.io/locater/reference/FitNull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Null Ordinary Least Squares Model — FitNull","text":"","code":"FitNull(y, A = NULL)"},{"path":"https://ryanchrist.github.io/locater/reference/FitNull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Null Ordinary Least Squares Model — FitNull","text":"y n x m matrix m quantitative phenotypes (one phenotype / column) n x q matrix q background covariates","code":""},{"path":"https://ryanchrist.github.io/locater/reference/Haps2Genotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a matrix of haplotypes to genotypes — Haps2Genotypes","title":"Collapse a matrix of haplotypes to genotypes — Haps2Genotypes","text":"Collapse matrix haplotypes genotypes","code":""},{"path":"https://ryanchrist.github.io/locater/reference/Haps2Genotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a matrix of haplotypes to genotypes — Haps2Genotypes","text":"","code":"Haps2Genotypes(haps, ploidy = 2L, method = \"additive\")"},{"path":"https://ryanchrist.github.io/locater/reference/Haps2Genotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse a matrix of haplotypes to genotypes — Haps2Genotypes","text":"haps vector p x N matrix 1s 0s N haplotypes observed p loci ploidy ploidy underlying organisms, haplotypes corresponding organism assumed stored consecutively haps. Default = 2 (diploid) method character \"additive\", \"recessive\", \"dominant\" giving model inheritance tested, default = \"additive\"","code":""},{"path":"https://ryanchrist.github.io/locater/reference/Haps2Genotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse a matrix of haplotypes to genotypes — Haps2Genotypes","text":"matrix genotypes dimensions p x n = N / ploidy","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestCachedMarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Test All Cached Markers Fast method for performing single marker testing across all variants stored in the kalis::CacheHaplotypes — TestCachedMarkers","title":"Test All Cached Markers Fast method for performing single marker testing across all variants stored in the kalis::CacheHaplotypes — TestCachedMarkers","text":"Test Cached Markers Fast method performing single marker testing across variants stored kalis::CacheHaplotypes","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestCachedMarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test All Cached Markers Fast method for performing single marker testing across all variants stored in the kalis::CacheHaplotypes — TestCachedMarkers","text":"","code":"TestCachedMarkers(   y,   A = NULL,   from = 1L,   to = kalis::L(),   ploidy = 2L,   model = \"additive\" )"},{"path":"https://ryanchrist.github.io/locater/reference/TestCachedMarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test All Cached Markers Fast method for performing single marker testing across all variants stored in the kalis::CacheHaplotypes — TestCachedMarkers","text":"y n x m matrix m quantitative phenotypes (one phenotype / column) n x q matrix q background covariates positive integer giving index first variant cache tested, default = 1L. positive integer giving index last variant cache tested, default = kalis::L(), last variant. ploidy positive integer giving ploidy organisms whose haplotypes cached, default = 2L. model character \"additive\", \"recessive\", \"dominant\" giving model inheritance tested, default = \"additive\"","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestCachedMarkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test All Cached Markers Fast method for performing single marker testing across all variants stored in the kalis::CacheHaplotypes — TestCachedMarkers","text":"data.frame -log10 p-values. row corresponds variant tested (order starting variant index ) m columns corresponds phenotype provided y (order columns y).","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestCladeMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Test a Clade Matrix (local relatedness matrix) for association with phenotypes — TestCladeMat","title":"Test a Clade Matrix (local relatedness matrix) for association with phenotypes — TestCladeMat","text":"Test local relatedness matrix association phenotype(s).","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestCladeMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test a Clade Matrix (local relatedness matrix) for association with phenotypes — TestCladeMat","text":"","code":"TestCladeMat(   y,   M,   Q,   k = NULL,   prop.var.goal = 0.95,   var.ratio.goal = 0.95,   stop.eval.func = NULL,   calc.obs.T = FALSE,   use.forking = FALSE,   nthreads = 1L )"},{"path":"https://ryanchrist.github.io/locater/reference/TestCladeMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test a Clade Matrix (local relatedness matrix) for association with phenotypes — TestCladeMat","text":"y n m matrix quantitative phenotypes n samples m phenotypes M local n n relatedness/clade matrix, one produced kalis::CladesMat Q n q orthogonal matrix whose columns span column space background covariates k vector non-negative integers, number eigenvalues calculate try approximate null distribution, see Details. var.ratio.goal double [0,1], lambda_k / lambda_k-1 >= var.ratio.goal, spectrum plateaued, can trust approximation stop calculating eigenvalues, see Details. stop.eval.func function returns TRUE associations can ruled insignificant eigendecomposition stopped early, see Details. calc.obs.T experimental feature coming soon allow return truncated quadratic form statistics T use.forking logical, forking used underlying FFT? nthreads positive integer, many cores multithreaded routines? min.prop.var double [0,1], obtained enough eigenvalues explain least minimum proportion variance, can trust approximation stop calculating eigenvalues, see Details.","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestCladeMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test a Clade Matrix (local relatedness matrix) for association with phenotypes — TestCladeMat","text":"data.frame m rows (first row corresponding first phenotype/column y). data frame fields: qform: quadratic form -log10 p-value obs: observed value quadratic form test statistic obs.T: observed value truncated quadratic form test statistic (experimental feature, coming soon, NAs now) precise: logical, TRUE value qform can trusted based robust approximation remainder term – eigendecomposition stopping criteria reached. FALSE, largest number eigenvalues k provided sufficient satisfy stopping criteria approximation may unreliable – consider retrying larger eigendecomposition budget k. exit.status: integer, 0 errors encountered.","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestCladeMat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test a Clade Matrix (local relatedness matrix) for association with phenotypes — TestCladeMat","text":"Concerning specification k, k=0 represents evaluating eigenvalues simply calculating Satterthwaite (SW) approximation based traces matrix. k NULL, k set 0. k provided include 0, 0 appended k SW approximation always calculated. stop.eval.function function can used prematurely stop procedure results almost guaranteed insignificant. function called number k eigenvalues calculated (including k=0). always takes one two arguments. first argument must always vector estimated QForm p-values [0,1]. second argument given function definition, proportion variance explained current set evaluated eigenvalues (number [0,1]) passed . allows user use different early stopping rules based p-values test statistics, current estimated set QForm p-values, proportion variance captured current set eigenvalues. allows user initial screen just SW approximation (leaving k stop.eval.func NULL). always want bipass SW approximation try accurate approximations, can define stop.eval.func return FALSE whenever second argument (prop.var) 0.","code":""},{"path":[]},{"path":"https://ryanchrist.github.io/locater/reference/TestCladeMat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test a Clade Matrix (local relatedness matrix) for association with phenotypes — TestCladeMat","text":"","code":"if (FALSE) { # \\dontrun{ } # }"},{"path":"https://ryanchrist.github.io/locater/reference/TestLoci.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to Test a Chromosome with LOCATER and kalis — TestLoci","title":"Wrapper to Test a Chromosome with LOCATER and kalis — TestLoci","text":"simple wrapper function designed allow users easliy run LOCATER conjunction kalis.","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestLoci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to Test a Chromosome with LOCATER and kalis — TestLoci","text":"","code":"TestLoci(   y,   pars,   target.loci = 1:L(),   A = NULL,   test.opts = list(),   verbose = FALSE,   num.ckpts = 0L,   ckpt.first.locus = FALSE,   use.forking = FALSE,   nthreads = 1L )"},{"path":"https://ryanchrist.github.io/locater/reference/TestLoci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to Test a Chromosome with LOCATER and kalis — TestLoci","text":"y n x m matrix m quantitative phenotypes (one phenotype / column) pars kalisParameters object specifing HMM parameters Li Stephens HMM returned kalis::Parameters target.loci vector integers specifying index variants among cached kalis::CacheHaplotypes screened LOCATER n x q matrix q background covariates (intercept – column 1s – included). Just intercept default. test.opts list testing options can customized behavior TestLoci (documentation coming) verbose logical, TRUE print progress statements TestLoci progresses num.ckpts integer, number checkpoints can stored memory. default = 0. Increasing even just `2L` `3L` yields significant speed ups. ckpt.first.locus logical, first target locus stored checkpoint. Default FALSE first target locus far start cached chromosome, TRUE may yield acceleration. use.forking logical, multiprocessing process forking allowed?  relatively minor acclerations possible TRUE, users verify safe launch forked processes compute cluster. nthreads integer, number threads available","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestLoci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to Test a Chromosome with LOCATER and kalis — TestLoci","text":"data.table one row per target locus including following key fields locus.idx: index corresponding variant (corresponding target.loci) phenotype: phenotype tested (given column index y ) tot: LOCATER -log10 p-value smt: -log10 p-value single marker testing rd: -log10 p-value returned running Stable Distillation qform: -log10 p-value returned quadratic form testing","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestMarker.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Single Marker Testing (SMT) on a particular variant — TestMarker","title":"Perform Single Marker Testing (SMT) on a particular variant — TestMarker","text":"Perform Single Marker Testing (SMT) particular variant","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestMarker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Single Marker Testing (SMT) on a particular variant — TestMarker","text":"","code":"TestMarker(x, g, add.noise = FALSE)"},{"path":"https://ryanchrist.github.io/locater/reference/TestMarker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Single Marker Testing (SMT) on a particular variant — TestMarker","text":"x null model object returned FitNull g genotype vector add.noise 'raw' return raw residuals, FALSE simply rank normalize residuals, TRUE add structured noise along subspace spanned background covs genotype residuals 'full rank': truly N(0,), curved Gaussian.","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestMarker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Single Marker Testing (SMT) on a particular variant — TestMarker","text":"list three elements `p-value`: single marker test p-value `y`: residual phenotype vector testing genotype `Q`: orthogonal matrix columns spanning column space tested genotype background covariates null model, useful testing","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestSprigs.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Sprigs — TestSprigs","title":"Test Sprigs — TestSprigs","text":"Test Sprigs object returned kalis::Sprigs using Stable Distillation.","code":""},{"path":"https://ryanchrist.github.io/locater/reference/TestSprigs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Sprigs — TestSprigs","text":"","code":"TestSprigs(   y,   sprigs,   ortho = FALSE,   Q = matrix(1/sqrt(nrow(y)), nrow(y), 1),   use.forking = FALSE )"},{"path":"https://ryanchrist.github.io/locater/reference/TestSprigs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Sprigs — TestSprigs","text":"y n x m matrix phenotype residuals, one phenotype per column sprigs list returned kalis::Sprigs ortho logical, deprecated, currently kept background compatibility Q n x q orthogonal matrix columns spanning column space background covariates use.forking logical, multiprocessing process forking allowed?  relatively minor acclerations possible TRUE, users verify safe launch forked processes compute cluster.","code":""},{"path":"https://ryanchrist.github.io/locater/reference/distill_pivot_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallelized Stable Distillation for the OLS Model — distill_pivot_par","title":"Parallelized Stable Distillation for the OLS Model — distill_pivot_par","text":"Distill multiple outcome vectors null alternative OLS model (parallel)","code":""},{"path":"https://ryanchrist.github.io/locater/reference/distill_pivot_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallelized Stable Distillation for the OLS Model — distill_pivot_par","text":"","code":"distill_pivot_par(y, x, Q, max_num_causal, p_order = seq_len(ncol(x)), ...)"},{"path":"https://ryanchrist.github.io/locater/reference/distill_pivot_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallelized Stable Distillation for the OLS Model — distill_pivot_par","text":"y n x m matrix phenotype vectors, one phenotype per column x n x p matrix predictors (may passed sparseMatrix, see Matrix package) Q orthogonal matrix whose columns span column space background covariates max_num_causal non-negative integer, maximum number causal/active predictors search p_order vector non-negative integers, provided, columns x distilled order p_order[1],p_order[2],..","code":""},{"path":"https://ryanchrist.github.io/locater/reference/distill_pivot_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallelized Stable Distillation for the OLS Model — distill_pivot_par","text":"list containing p_value vector m p-values Renyi Outlier Test, order phenotype vectors provided u p x m matrix extracted p-values signs p x m matrix effect signs corresponding extracted p-values u. Note, signs useful post-hoc interpretation extracted SD procedure independent u. y n x m matrix distilled phenotype vectors y left biproduct distillation (independent u) ready downstream testing","code":""},{"path":"https://ryanchrist.github.io/locater/reference/distill_pivot_par.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallelized Stable Distillation for the OLS Model — distill_pivot_par","text":"Parallelized implementation OLS distillation routine simple quantile filter proposed Section 4 https://arxiv.org/pdf/2212.12539 .","code":""},{"path":"https://ryanchrist.github.io/locater/reference/msse.test.html","id":null,"dir":"Reference","previous_headings":"","what":"MSSE Test A p-value combination test that combines three independent p-values (element wise if three vectors are given) while prioritizing the first x, as proposed in our pre-print www.biorxiv.org/content/10.1101/2024.09.30.615852. See Details — msse.test","title":"MSSE Test A p-value combination test that combines three independent p-values (element wise if three vectors are given) while prioritizing the first x, as proposed in our pre-print www.biorxiv.org/content/10.1101/2024.09.30.615852. See Details — msse.test","text":"Let f Fisher combination function maps set -log10 p-values single -log10 p-value using classic Fisher combination approach. setting wish combine three -log10 p-values – x, y, z – using f(x,y,z) treats three -log10 p-values exchangeably. However, settings, may using y z boost signal x. words, may able safely assume f(x,y,z) chance significant x least somewhat significant. run setting LOCATER x corresponds single marker test (SMT) -log10 p-value y z correspond tests performed via Stable Distillation QForm respectively. context, MSSE gains power Fisher combination ignoring cases y /z significant without x somewhat significant.","code":""},{"path":"https://ryanchrist.github.io/locater/reference/msse.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MSSE Test A p-value combination test that combines three independent p-values (element wise if three vectors are given) while prioritizing the first x, as proposed in our pre-print www.biorxiv.org/content/10.1101/2024.09.30.615852. See Details — msse.test","text":"","code":"msse.test(x, y, z, test.1.solo = TRUE)"},{"path":"https://ryanchrist.github.io/locater/reference/msse.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MSSE Test A p-value combination test that combines three independent p-values (element wise if three vectors are given) while prioritizing the first x, as proposed in our pre-print www.biorxiv.org/content/10.1101/2024.09.30.615852. See Details — msse.test","text":"x vector -log10 p-values y vector -log10 p-values z vector -log10 p-values test.1.solo logical, FALSE ignore situations x might significant focus statistical power cases x significant combination y /z. default = TRUE.","code":""},{"path":"https://ryanchrist.github.io/locater/reference/msse.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MSSE Test A p-value combination test that combines three independent p-values (element wise if three vectors are given) while prioritizing the first x, as proposed in our pre-print www.biorxiv.org/content/10.1101/2024.09.30.615852. See Details — msse.test","text":"vector -log10 p-values","code":""}]
